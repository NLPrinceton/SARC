 <!-- manual page source format generated by PolyglotMan v3.0.3a12, -->
<!-- available via anonymous ftp from ftp.cs.berkeley.edu:/ucb/people/phelps/tcltk/rman.tar.Z -->

<HTML>
<HEAD>
<TITLE>WNINTRO(3WN) manual page</TITLE>
</HEAD>
<BODY>
<A HREF="#toc">Table of Contents</A><P>
 
<H2><A NAME="sect0" HREF="#toc0">NAME </A></H2>
wnintro - introduction to WordNet library functions  
<H2><A NAME="sect1" HREF="#toc1">DESCRIPTION 
</A></H2>
This section of the <I>WordNet Reference Manual </I> contains manual pages that 
describe the WordNet library functions and API. <P>
 Functions are organized 
into the following categories:  <P>
<center>  <TABLE BORDER cellpadding=3>
 <TR> <Th ALIGN=LEFT>Category</Th> <Th ALIGN=LEFT>Manual Page </Th> <Th ALIGN=LEFT>Object File </Th> </TR>
 <TR>  <TR> <TD ALIGN=LEFT>Database Search </TD> <TD ALIGN=LEFT><B>wnsearch </B>(3WN) </TD> <TD ALIGN=LEFT>search.o </TD> </TR>
 <TR> <TD ALIGN=LEFT>Morphology </TD> <TD ALIGN=LEFT><B>morph </B>(3WN) 
</TD> <TD ALIGN=LEFT>morph.o </TD> </TR>
 <TR> <TD ALIGN=LEFT>Misc. Utility </TD> <TD ALIGN=LEFT><B>wnutil </B>(3WN) </TD> <TD ALIGN=LEFT>wnutil.o </TD> </TR>
 <TR> <TD ALIGN=LEFT>Binary Search </TD> <TD ALIGN=LEFT><B>binsrch 
</B>(3WN) </TD> <TD ALIGN=LEFT>binsrch.o </TD> </TR>
 </TABLE></center>
<P>
 The WordNet library is used by all of the searching 
interfaces provided with the various WordNet packages.  Additional programs 
in the system, such as <B><A HREF="escort.htm">escort</B>(1WN)<B></B></A>
 and <B><A HREF="grind.htm">grind</B>(1WN)</A>
, also use functions 
in this library. <P>
 The WordNet library is provided in both source and binary 
forms (on some platforms) to allow users to build applications and tools 
to their own specifications that utilize the WordNet database.  We do not 
provide programming support or assistance. <P>
 The code conforms to ANSI C 
standards.  Functions are defined with function prototypes.  If you do not 
have a compiler that accepts prototypes, you must edit the source code 
and remove the prototypes before compiling. <B><A HREF="gcc.htm">gcc</B>(1)</A>
,<B></B> version 2.7.2, was used 
to compile all of the Unix libraries.  The Macintosh code was compiled 
with Metroworks CodeWarrior 9, the Windows code was compiled with Microsoft 
Visual C++ 4.0, and the DOS code was compiled with DJGPP 2.01.  The same 
code was compiled on all platforms, using <B><A HREF="cpp.htm">cpp</B>(1)</A>
 <B>#ifdef </B> statements to 
conditionally compile platform specific code.  The platform specific definitions 
are: <P>
<center>  <TABLE BORDER cellpadding=3>
 <TR> <TD ALIGN=LEFT><B>UNIX </B> </TD> <TD ALIGN=LEFT>Defined for all Unix operating systems </TD> </TR>
 <TR> <TD ALIGN=LEFT><B>PC </B> </TD> <TD ALIGN=LEFT>Defined 
for all PC operating systems </TD> </TR>
 <TR> <TD ALIGN=LEFT><B>WINDOWS </B> </TD> <TD ALIGN=LEFT>Defined for Windows/95 and Windows 
3.1 platforms </TD> </TR>
 <TR> <TD ALIGN=LEFT><B>MAC </B> </TD> <TD ALIGN=LEFT>Defined for all Macintosh platforms </TD> </TR>
 </TABLE></center>
<P>
 Note that 
when <B>WINDOWS </B> is defined, <B>PC </B> is also defined.  
<H2><A NAME="sect2" HREF="#toc2">LIST OF WORDNET LIBRARY 
FUNCTIONS </A></H2>
Not all library functions are listed below. Missing are mainly 
functions that are called by documented ones, or ones that were written 
for specific applications or tools used during WordNet development.  Data 
structures are defined in <B>wntypes.h </B>. <P>
  
<H3><A NAME="sect3" HREF="#toc3">Database Searching Functions (search.o) 
</A></H3>
<P>
 
<DL>

<DT><B>findtheinfo </B>  </DT>
<DD>Primary search function for WordNet database.  Returns formatted 
search results in text buffer.  Used by WordNet interfaces to perform requested 
search. </DD>

<DT><B>findtheinfo_ds</B>  </DT>
<DD>Primary search function for WordNet database.  Returns 
search results in linked list data structure. </DD>

<DT><B>is_defined</B>  </DT>
<DD>Set bit for each 
search type that is valid for the search word passed and return bit mask. 
</DD>

<DT><B>in_wn</B>  </DT>
<DD>Set bit for each syntactic category that search word is in. </DD>

<DT><B>index_lookup</B> 
 </DT>
<DD>Find word in index file and return parsed entry in data structure. Input 
word must be exact match of string in database.  Called by <B>getindex() </B>. 
</DD>

<DT><B>getindex</B>  </DT>
<DD>Find word in index file, trying different techniques - replace 
hyphens with underscores, replace underscores with hyphens, strip hyphens 
and underscores, strip periods. </DD>

<DT><B>read_synset</B>  </DT>
<DD>Read synset from data file 
at byte offset passed and return parsed entry in data structure.  Calls 
<B>parse_synset() </B>. </DD>

<DT><B>parse_synset</B>  </DT>
<DD>Read synset at current byte offset in file 
and return parsed entry in data structure. </DD>

<DT><B>free_syns</B>  </DT>
<DD>Free a synset linked 
list allocated by <B>findtheinfo_ds() </B>. </DD>

<DT><B>free_synset</B>  </DT>
<DD>Free a synset structure. 
</DD>

<DT><B>free_index</B>  </DT>
<DD>Free an index structure. </DD>

<DT><B>traceptrs_ds</B>  </DT>
<DD>Recursive search algorithm 
to trace a pointer tree and return results in linked list. </DD>

<DT><B>do_trace</B>  </DT>
<DD>Do 
requested search on synset passed returning formatted output in buffer. 
</DD>
</DL>
<P>
  
<H3><A NAME="sect4" HREF="#toc4">Morphology Functions (morph.o) </A></H3>
<P>
 
<DL>

<DT><B>morphinit</B>  </DT>
<DD>Open exception list files. 
</DD>

<DT><B>re_morphinit</B>  </DT>
<DD>Close exception list files and reopen. </DD>

<DT><B>morphstr</B>  </DT>
<DD>Try to find 
base form (lemma) of word or collocation in syntactic category passed. 
 Calls <B>morphword() </B> for each word in string passed. </DD>

<DT><B>morphword</B>  </DT>
<DD>Try to find 
base form (lemma) of individual word in syntactic category passed. </DD>
</DL>
<P>
  
<H3><A NAME="sect5" HREF="#toc5">Utility 
Functions (wnutil.o) </A></H3>
<P>
 
<DL>

<DT><B>wninit</B>  </DT>
<DD>Top level function to open database files 
and morphology exception lists. </DD>

<DT><B>re_wninit</B>  </DT>
<DD>Top level function to close 
and reopen database files and morphology exception lists. </DD>

<DT><B>cntwords</B>  </DT>
<DD>Count 
the number of underscore or space separated words in a string. </DD>

<DT><B>strtolower</B> 
 </DT>
<DD>Convert string to lower case and remove trailing adjective marker if 
found. </DD>

<DT><B>ToLowerCase</B>  </DT>
<DD>Convert string passed to lower case. </DD>

<DT><B>strsubst</B>  </DT>
<DD>Replace 
all occurrences of <I>from </I> with <I>to </I> in <I>str </I>. </DD>

<DT><B>getptrtype</B>  </DT>
<DD>Return code for 
pointer type character passed. </DD>

<DT><B>getpos</B>  </DT>
<DD>Return syntactic category code for 
string passed. </DD>

<DT><B>getsstype</B>  </DT>
<DD>Return synset type code for string passed. </DD>

<DT><B>FmtSynset</B> 
 </DT>
<DD>Reconstruct synset string from synset pointer. </DD>

<DT><B>StrToPos</B>  </DT>
<DD>Passed string 
for syntactic category, returns corresponding integer value. </DD>

<DT><B>GetSynsetForSense</B> 
 </DT>
<DD>Return synset for sense key passed. </DD>

<DT><B>GetDataOffset</B>  </DT>
<DD>Find synset offset 
for sense. </DD>

<DT><B>GetPolyCount</B>  </DT>
<DD>Find polysemy count for sense passed. </DD>

<DT><B>GetWORD</B>  
</DT>
<DD>Return word part of sense key. </DD>

<DT><B>GetPOS</B>  </DT>
<DD>Return syntactic category code for 
sense key passed. </DD>

<DT><B>WNSnsToStr</B>  </DT>
<DD>Generate sense key for index entry passed. 
</DD>

<DT><B>GetValidIndexPointer</B>  </DT>
<DD>Search for string and/or base form of word in database 
and return index structure for word if found. </DD>

<DT><B>GetWNSense</B>  </DT>
<DD>Return sense 
number in database for sense key. </DD>

<DT><B>GetSenseIndex</B>  </DT>
<DD>Return parsed sense index 
entry for sense key passed. </DD>

<DT><B>default_display_message</B>  </DT>
<DD>Default function to 
use as value of <B>display_message </B>.  Simply returns <B>-1 </B>. </DD>
</DL>
<P>
  
<H3><A NAME="sect6" HREF="#toc6">Binary Search Functions 
(binsrch.o) </A></H3>
<P>
 
<DL>

<DT><B>bin_search</B>  </DT>
<DD>General purpose binary search function to search 
for key as first item on line in sorted file. </DD>

<DT><B>copyfile</B>  </DT>
<DD>Copy contents from 
one file to another. </DD>

<DT><B>replace_line</B>  </DT>
<DD>Replace a line in a sorted file.  </DD>

<DT><B>insert_line</B> 
 </DT>
<DD>Insert a line into a sorted file. </DD>
</DL>
 
<H2><A NAME="sect7" HREF="#toc7">LIST OF HEADER FILES </A></H2>

<DL>

<DT><B>license.h</B>  </DT>
<DD>Text 
of WordNet license in various C data structure formats </DD>

<DT><B>setutil.h</B>  </DT>
<DD>Functions 
for creating and working with sets.  Used to perform <FONT SIZE=-1><B>RELATIVES </B></FONT>
  search. 
</DD>

<DT><B>wn.h</B>  </DT>
<DD>Top level WordNet include file that includes most others.  This should 
be sufficient for most applications.  Also lists function prototypes for 
library API. </DD>

<DT><B>wnconsts.h</B>  </DT>
<DD>Constants used by library functions and applications. 
 Conditionally compiled code determines default pathnames and buffer sizes 
for different platforms,. </DD>

<DT><B>wnglobal.h</B>  </DT>
<DD>External declarations for global variables 
initialized in <B>wnglobal.c </B>.  These variables are static: they do not change 
while library code is run, and they do not influence how the library operates. 
 The exception is <B>wnrelease </B>, which is initialized to <B>1.6 </B>, but can be 
changed at run-time by setting the environment variable <B>WNDBVERSION </B>.  Setting 
it to <B>1.5 </B> enables the WordNet 1.6 library code to work with the 1.5 database 
files. </DD>

<DT><B>wnhelp.h</B>  </DT>
<DD>External declaration for helptext initialized in <B>wnhelp.c 
</B>. </DD>

<DT><B>wnrtl.h</B>  </DT>
<DD>External declarations for global variables and flags used and 
set by the WordNet library functions at run-time. </DD>

<DT><B>wntypes.h</B>  </DT>
<DD>C typedefs for 
data structures used in library. </DD>
</DL>
 
<H2><A NAME="sect8" HREF="#toc8">NOTES </A></H2>
All library functions that access 
the database files expect the files to be open.  The function <B><A HREF="wninit.htm">wninit</B>(3WN)</A>
 
must be called before other database access functions such as <B><A HREF="findtheinfo.htm">findtheinfo</B>(3WN)</A>
 
or <B><A HREF="read_synset.htm">read_synset</B>(3WN)</A>
.<B></B> <P>
 Inclusion of the header file <B>wn.h </B> is usually sufficient, 
as it includes several other WordNet header files. <P>
 The command line interface 
is a good example of a simple application that uses several WordNet library 
functions.  <P>
 Many of the library functions are passed or return syntactic 
category or synset type information.  The following table lists the possible 
categories as integer codes, synset type constant names, syntactic category 
constant names, single characters and character strings. <P>
<center>  <TABLE BORDER cellpadding=3>
 <TR> <Th ALIGN=CENTER>Integer <Th ALIGN=CENTER>Synset Type<br>Constant <Th ALIGN=CENTER>Syntactic Category<br>Constant <Th ALIGN=CENTER>Char <Th ALIGN=CENTER>String </TR>
 <TR>  <TR> <TD ALIGN=CENTER>1 </TD> <TD ALIGN=LEFT>NOUN </TD> <TD ALIGN=LEFT>NOUN </TD> <TD ALIGN=CENTER>n </TD> <TD ALIGN=LEFT>noun </TD> </TR>
 <TR> <TD ALIGN=CENTER>2 </TD> <TD ALIGN=LEFT>VERB </TD> <TD ALIGN=LEFT>VERB </TD> <TD ALIGN=CENTER>v </TD> <TD ALIGN=LEFT>verb </TD> </TR>
 <TR> <TD ALIGN=CENTER>3 </TD> <TD ALIGN=LEFT>ADJ </TD> <TD ALIGN=LEFT>ADJ </TD> <TD ALIGN=CENTER>a 
</TD> <TD ALIGN=LEFT>adj </TD> </TR>
 <TR> <TD ALIGN=CENTER>4 </TD> <TD ALIGN=LEFT>ADV </TD> <TD ALIGN=LEFT>ADV </TD> <TD ALIGN=CENTER>r </TD> <TD ALIGN=LEFT>adv </TD> </TR>
 <TR> <TD ALIGN=CENTER>5 </TD> <TD ALIGN=LEFT>SATELLITE </TD> <TD ALIGN=LEFT>ADJ </TD> <TD ALIGN=CENTER>s </TD> <TD ALIGN=LEFT><I>n/a </I> </TD> </TR>
 </TABLE></center>
 
<H2><A NAME="sect9" HREF="#toc9">ENVIRONMENT 
VARIABLES </A></H2>

<DL>

<DT><B>WNHOME</B>  </DT>
<DD>Base directory for WordNet.  Unix default is <B>/usr/local/wordnet1.6 
</B>, PC default is <B>C:\wn16 </B>, Macintosh default is <B>: </B>. </DD>

<DT><B>WNSEARCHDIR</B>  </DT>
<DD>Directory 
in which the WordNet database has been installed.  Unix default is <B>WNHOME/dict 
</B>, PC default is <B>WNHOME\dict </B>, Macintosh default is <B>:Database </B>. </DD>

<DT><B>WNDBVERSION</B> 
 </DT>
<DD>Indicate which format the WordNet database files in WNSEARCHDIR are in. 
 The default is <B>1.6 </B>.  Setting WNDBVERION to <B>1.5 </B> allows the 1.6 library code 
to work with the 1.5 database files. </DD>
</DL>
 
<H2><A NAME="sect10" HREF="#toc10">FILES </A></H2>

<DL>

<DT><B>WNHOME/lib/libwn.a</B>  </DT>
<DD>WordNet library 
(Unix) </DD>

<DT><B>WNHOME\lib\libwn.lib</B>  </DT>
<DD>WordNet library (Windows) </DD>

<DT><B>WNHOME\lib\libwndos.a</B> 
 </DT>
<DD>WordNet library (DOS) </DD>

<DT><B>WNHOME:Lib:libwn.ppc</B>  </DT>
<DD>WordNet library (Mac) </DD>

<DT><B>WNHOME/include/*</B> 
 </DT>
<DD>header files for use with WordNet library (Unix) </DD>

<DT><B>WNHOME\include\*</B>  </DT>
<DD>header 
files for use with WordNet library (PC) </DD>

<DT><B>WNHOME:Include:*</B>  </DT>
<DD>header files 
for use with WordNet library (Mac) </DD>
</DL>
 
<H2><A NAME="sect11" HREF="#toc11">SEE ALSO </A></H2>
<B><A HREF="wnintro.htm">wnintro</B>(1WN)</A>
, <B><A HREF="wnintro.htm">wnintro</B>(5WN)</A>
, 
<B><A HREF="wnintro.htm">wnintro</B>(7WN)</A>
. <P>
Miller, G. A. (1990), ed. <I>"WordNet: An On-Line Lexical Database" 
</I>. International Journal of Lexicography, Volume 3, Number 4.   <P>
Miller, G. 
A., et al. (1990, 1993). <I>"Five Papers on WordNet" </I>. Cognitive Science Laboratory 
Report 43. (Available from <a href="ftp://ftp.cogsci.princeton.edu/wordnet/">ftp://ftp.cogsci.princeton.edu/wordnet/ </a>.) <P>
Fellbaum, 
C. (1998), ed. <I>"WordNet: An Electronic Lexical Database" </I>. MIT Press, Cambridge, 
MA.  
<H2><A NAME="sect12" HREF="#toc12">BUGS </A></H2>
Please report bugs to <B>wordnet@princeton.edu </B>. <P>

<HR><P>
<A NAME="toc"><B>Table of Contents</B></A><P>
<UL>
<LI><A NAME="toc0" HREF="#sect0">NAME</A></LI>
<LI><A NAME="toc1" HREF="#sect1">DESCRIPTION</A></LI>
<LI><A NAME="toc2" HREF="#sect2">LIST OF WORDNET LIBRARY FUNCTIONS</A></LI>
<UL>
<LI><A NAME="toc3" HREF="#sect3">Database Searching Functions (search.o)</A></LI>
<LI><A NAME="toc4" HREF="#sect4">Morphology Functions (morph.o)</A></LI>
<LI><A NAME="toc5" HREF="#sect5">Utility Functions (wnutil.o)</A></LI>
<LI><A NAME="toc6" HREF="#sect6">Binary Search Functions (binsrch.o)</A></LI>
</UL>
<LI><A NAME="toc7" HREF="#sect7">LIST OF HEADER FILES</A></LI>
<LI><A NAME="toc8" HREF="#sect8">NOTES</A></LI>
<LI><A NAME="toc9" HREF="#sect9">ENVIRONMENT VARIABLES</A></LI>
<LI><A NAME="toc10" HREF="#sect10">FILES</A></LI>
<LI><A NAME="toc11" HREF="#sect11">SEE ALSO</A></LI>
<LI><A NAME="toc12" HREF="#sect12">BUGS</A></LI>
</UL>
</BODY></HTML>
